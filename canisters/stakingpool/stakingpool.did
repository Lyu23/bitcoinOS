type BitcoinNetwork = variant { mainnet; regtest; testnet };
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type GetUtxosResponse = record {
  next_page : opt blob;
  tip_height : nat32;
  tip_block_hash : blob;
  utxos : vec Utxo;
};
type InitArgument = record {
  os_canister : principal;
  duration_in_millisecond : nat64;
  name : text;
  network : BitcoinNetwork;
  description : text;
  annual_interest_rate : nat64;
};
type Metadata = record {
  ecdsa_key_id : EcdsaKeyId;
  os_canister : principal;
  owner : principal;
  duration_in_millisecond : nat64;
  name : text;
  network : BitcoinNetwork;
  description : text;
  updated_time : nat64;
  annual_interest_rate : nat64;
};
type NetworkResponse = record { network : text };
type Outpoint = record { txid : blob; vout : nat32 };
type RedeemLog = record {
  req : RedeemRequest;
  send_time : nat64;
  sender : principal;
};
type RedeemRequest = record {
  txid : text;
  recipient : text;
  network : BitcoinNetwork;
};
type RegisterStakingRequest = record {
  sender_address : text;
  txid : text;
  network : BitcoinNetwork;
  sent_time : nat64;
  sent_amount : nat64;
};
type Result = variant { Ok : nat64; Err : StakingError };
type Result_1 = variant { Ok : vec RedeemLog; Err : StakingError };
type Result_2 = variant { Ok : Metadata; Err : StakingError };
type Result_3 = variant { Ok : text; Err : StakingError };
type Result_4 = variant { Ok : StakingRecord; Err : StakingError };
type Result_5 = variant { Ok : GetUtxosResponse; Err : StakingError };
type StakingError = variant {
  AppendRedeemLogError : text;
  StakingRecordAlreadyExists : text;
  BitcoinAddressNetworkUnmatch : text;
  RedemptionNotAllowed;
  WalletAlreadyExists : text;
  UnAuthorized : text;
  CreateWalletError : text;
  InvalidNetwork;
  InsufficientFunds;
  StakingRecordNotFound : text;
};
type StakingRecord = record {
  status : StakingStatus;
  sender_address : text;
  duration_in_millisecond : nat64;
  txid : text;
  network : BitcoinNetwork;
  sender : principal;
  actual_amount : nat64;
  sent_time : nat64;
  sent_amount : nat64;
  updated_time : nat64;
};
type StakingStatus = variant { Redeemed; Redeeming; Confirmed; Pending };
type Utxo = record { height : nat32; value : nat64; outpoint : Outpoint };
type UtxoFilter = variant { page : blob; min_confirmations : nat32 };
service : (InitArgument) -> {
  balance : () -> (Result);
  counter : () -> (nat) query;
  logs : () -> (Result_1) query;
  metadata : () -> (Result_2) query;
  network : () -> (NetworkResponse) query;
  p2pkh_address : () -> (text);
  redeem : (RedeemRequest) -> (Result_3);
  register_staking_record : (RegisterStakingRequest) -> (Result_4);
  utxos : (opt UtxoFilter) -> (Result_5);
}
