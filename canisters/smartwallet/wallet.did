type BitcoinNetwork = variant { mainnet; regtest; testnet };
type satoshi = nat64;

type InitArgument = record {
    network : BitcoinNetwork;
    steward_canister : principal;
};

type Metadata = record { 
    network : BitcoinNetwork;
    steward_canister: principal;
    key_id: EcdsaKeyId;
    updated_time: u64; 
};

type MetadataResult = variant { Ok : Metadata; Err : WalletError };

type EcdsaKeyId = record {
    curve : EcdsaCurve;
    name : text;
};

type EcdsaCurve = variant {
    secp256k1;
};

type WalletError = variant {
    ECDSAKeyAlreadyExists : text;
    ECDSAKeyNotFound : text;
    ECDSAKeyUpdateError;
    RegisterECDSAKeyError;
    NetworkAlreadyExists;
    UnAuthorized : text;
    CreateWalletError : text;
    BaseError : text;
};

type RawTransactionInfo = record {
  transaction: blob;
  witness_script: blob;
  sig_hashes: vec blob;
};


type outpoint = record {
  txid : blob;
  vout : nat32
};

type Utxo = record {
  outpoint: outpoint;
  value: satoshi;
  height: nat32;
};

type BoolResult = variant { Ok : bool; Err : WalletError };
type StringResult = variant { Ok : text; Err : WalletError };
type NetworkResponse = record { network : text };
type PrincipalResult = variant { Ok : principal; Err : WalletError };

type RawTransactionInfoResult = variant { Ok: RawTransactionInfo; Error: WalletError };
type UpdateKeyRequest = record { new_key : text; old_key : text };
type TransferRequest = record { addresses : vec text; amounts : vec nat64};
type UtxosResponseResult = variant { Ok: vec Utxo; Error: WalletError };

service : (InitArgument) -> {

    // Query
    owner : () -> (PrincipalResult) query;
    edcsa_key : () -> (StringResult) query;
    metadata : () -> (MetadataResult) query;
    network : () -> (NetworkResponse) query;
    
    // Update
    balance : (text) -> (StringResult) ;
    bulid_transaction : (TransferRequest) -> (RawTransactionInfoResult);
    current_fee_percentiles : () -> (vec nat64);
    get_or_create_multisig22_wallet_address: () -> (StringResult);
    get_or_create_single_p2wsh_wallet_address : () -> (StringResult);
    issue_rgb20 : () -> (text);
    p2pkh_address : () -> (StringResult);
    public_key : () -> (variant { Ok: record { public_key_hex: text; }; Err: text });
    utxos : (text) -> (UtxosResponseResult);
}   