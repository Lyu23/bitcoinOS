type BitcoinNetwork = variant { mainnet; regtest; testnet };
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type GetUtxosResponse = record {
  next_page : opt blob;
  tip_height : nat32;
  tip_block_hash : blob;
  utxos : vec Utxo;
};
type InitArgument = record {
  network : BitcoinNetwork;
  steward_canister : principal;
};
type Metadata = record {
  ecdsa_key_id : EcdsaKeyId;
  owner : principal;
  network : BitcoinNetwork;
  steward_canister : principal;
  updated_time : nat64;
};
type NetworkResponse = record { network : text };
type Outpoint = record { txid : blob; vout : nat32 };
type PublicKeyResponse = record { public_key_hex : text };
type RawTransactionInfo = record {
  tx : blob;
  sig_hashes : vec blob;
  witness_script : blob;
};
type Result = variant { Ok : nat64; Err : WalletError };
type Result_1 = variant { Ok : RawTransactionInfo; Err : WalletError };
type Result_2 = variant { Ok : vec nat64; Err : WalletError };
type Result_3 = variant { Ok : text; Err : WalletError };
type Result_4 = variant { Ok : Metadata; Err : WalletError };
type Result_5 = variant { Ok : principal; Err : WalletError };
type Result_6 = variant { Ok : PublicKeyResponse; Err : WalletError };
type Result_7 = variant { Ok : GetUtxosResponse; Err : WalletError };
type TransferInfo = record { recipient : text; amount : nat64 };
type TransferRequest = record { txs : vec TransferInfo };
type Utxo = record { height : nat32; value : nat64; outpoint : Outpoint };
type WalletError = variant {
  NetworkAlreadyExists;
  BaseError : text;
  RegisterECDSAKeyError;
  ECDSAKeyUpdateError;
  AppendTransferLogError : text;
  StewardCallError : text;
  ECDSAKeyNotFound : text;
  ECDSAKeyAlreadyExists : text;
  WalletAlreadyExists : text;
  UnAuthorized : text;
  WalletNotFound : text;
  CreateWalletError : text;
  OnlySupportP2pkhSign;
  InsufficientFunds;
};
service : (InitArgument) -> {
  balance : (text) -> (Result);
  build_transaction_multisig22 : (TransferRequest) -> (Result_1);
  current_fee_percentiles : () -> (Result_2);
  ecdsa_key : () -> (Result_3) query;
  get_or_create_multisig22_wallet_p2wsh_address : () -> (Result_3);
  get_or_create_single_wallet_p2wsh_address : () -> (Result_3);
  metadata : () -> (Result_4) query;
  network : () -> (NetworkResponse) query;
  owner : () -> (Result_5) query;
  p2pkh_address : () -> (Result_3);
  public_key : () -> (Result_6);
  transfer_multisig22 : (TransferRequest) -> (Result_3);
  transfer_single : (TransferRequest) -> (Result_3);
  transfer_to_p2pkh : (TransferInfo) -> (Result_3);
  utxos : (text) -> (Result_7);
}
